{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jdcju\\\\Desktop\\\\100xJackpotNew\\\\frontend\\\\src\\\\app.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport Web3 from 'web3';\nimport JackpotGameABI from './abi/JackpotGame.json';\nimport Token100xABI from './abi/Token100x.json';\nimport BondingCurveABI from './abi/BondingCurve.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // State variables\n  const [nextJackpotValue, setNextJackpotValue] = useState('0');\n  const [guessCost, setGuessCost] = useState('0');\n  const [web3, setWeb3] = useState(null);\n  const [accounts, setAccounts] = useState([]);\n  const [jackpotContract, setJackpotContract] = useState(null);\n  const [tokenContract, setTokenContract] = useState(null);\n  const [bondingCurveContract, setBondingCurveContract] = useState(null);\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [jackpotValue, setJackpotValue] = useState('0');\n  const [hintValue, setHintValue] = useState('');\n  const [liquidityValue, setLiquidityValue] = useState('0');\n  const [tokenPrice, setTokenPrice] = useState('0');\n  const [numTokens, setNumTokens] = useState('1');\n  const [totalSupply, setTotalSupply] = useState('0');\n  const [buySellMode, setBuySellMode] = useState('buy');\n  const [hintCost, setHintCost] = useState('0');\n  const [tokenBalance, setTokenBalance] = useState('0');\n  const [uniquePlayers, setUniquePlayers] = useState(0);\n  const [totalWinners, setTotalWinners] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [statusMessage, setStatusMessage] = useState('');\n  const [purchasedHints, setPurchasedHints] = useState([]);\n  const JACKPOT_ADDRESS = process.env.REACT_APP_JACKPOT_ADDRESS || '0x1bCb1B4474b636874E1C35B0CC32ADb408bb43e0';\n  const TOKEN_ADDRESS = process.env.REACT_APP_TOKEN_ADDRESS || '0x0755fb9917419a08c90a0Fd245F119202844ec3D';\n  const BONDING_CURVE_ADDRESS = process.env.REACT_APP_BONDING_CURVE_ADDRESS || '0x2ECA93adD34C533008b947B2Ed02e4974122D525';\n\n  // Format address for display\n  const formatAddress = address => {\n    if (!address || address === '0x0000000000000000000000000000000000000000') return 'None';\n    return `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;\n  };\n\n  // Format large numbers properly\n  const formatTokenAmount = amount => {\n    if (!amount || amount === '0') return '0';\n    try {\n      // Convert from base units to tokens (6 decimals)\n      const amountStr = amount.toString(); // Ensure we have a string\n      const amountBN = new Web3.utils.BN(amountStr);\n      const tokenAmount = amountBN.div(new Web3.utils.BN(10 ** 6));\n      const parsedAmount = parseFloat(tokenAmount.toString());\n\n      // Format for very large numbers\n      if (parsedAmount >= 1000000000) {\n        const billionsAmount = parsedAmount / 1000000000;\n        return `${billionsAmount.toLocaleString(undefined, {\n          maximumFractionDigits: 0\n        })}B`;\n      } else if (parsedAmount >= 1000000) {\n        const millionsAmount = parsedAmount / 1000000;\n        return `${millionsAmount.toLocaleString(undefined, {\n          maximumFractionDigits: 0\n        })}M`;\n      } else if (parsedAmount >= 1000) {\n        const thousandsAmount = parsedAmount / 1000;\n        return `${thousandsAmount.toLocaleString(undefined, {\n          maximumFractionDigits: 0\n        })}k`;\n      } else {\n        return parsedAmount.toLocaleString(undefined, {\n          maximumFractionDigits: 6\n        });\n      }\n    } catch (error) {\n      console.error('Error formatting token amount:', error, 'Input:', amount);\n      return '0';\n    }\n  };\n  // Add this function to fetch hint content from the API\n  const getHintContent = useCallback(async (hintIndex, userAddress) => {\n    try {\n      const response = await fetch(`/.netlify/functions/getHint?hintIndex=${hintIndex}&userAddress=${userAddress}`);\n      if (response.ok) {\n        const data = await response.json();\n        return data.hintContent;\n      } else {\n        const error = await response.json();\n        console.error(\"Error fetching hint:\", error);\n        return \"Error retrieving hint\";\n      }\n    } catch (error) {\n      console.error(\"Error connecting to hint API:\", error);\n      return \"Unable to connect to hint server\";\n    }\n  }, []); // Empty dependency array since it doesn't depend on external variables\n  // Updated loadPurchasedHints function\n  const loadPurchasedHints = useCallback(async () => {\n    if (!jackpotContract || !accounts[0]) return;\n    try {\n      const hintTotal = parseInt(await jackpotContract.methods.hintCount().call());\n      let purchased = [];\n\n      // Concurrent hint access checks\n      const hintAccessPromises = Array.from({\n        length: hintTotal\n      }, async (_, i) => {\n        const hasAccess = await jackpotContract.methods.hasAccessToHint(accounts[0], i).call();\n        return hasAccess ? i : null;\n      });\n      const hintAccess = await Promise.all(hintAccessPromises);\n      purchased = hintAccess.filter(index => index !== null);\n      setPurchasedHints(purchased);\n\n      // Set most recent hint if available\n      if (purchased.length > 0) {\n        const latestHintIndex = purchased[purchased.length - 1];\n        const hint = await getHintContent(latestHintIndex, accounts[0]);\n        setHintValue(hint);\n      }\n    } catch (error) {\n      console.error(\"Error loading purchased hints:\", error);\n    }\n  }, [jackpotContract, accounts, getHintContent]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const loadContractData = useCallback(async (web3, jackpot, token, bondingCurve, account) => {\n    try {\n      setIsLoading(true);\n\n      // Save the current message if it's important (contains certain keywords)\n      const currentMessage = statusMessage;\n      const isImportantMessage = currentMessage.includes('CONGRATULATIONS') || currentMessage.includes('correct') || currentMessage.includes('incorrect');\n      if (!isImportantMessage) {\n        setStatusMessage('Loading contract data...');\n      }\n\n      // Use Promise.all for concurrent calls\n      const [tokenBalance, tokenSupply, jackpotValue, nextJackpotValue, guessCost, hintCost, totalWinners, uniquePlayers] = await Promise.all([token.methods.balanceOf(account).call(), token.methods.totalSupply().call(), jackpot.methods.jackpotAmount().call(), jackpot.methods.nextJackpotAmount().call(), jackpot.methods.guessCost().call(), jackpot.methods.hintCost().call(), jackpot.methods.totalWinners().call(), jackpot.methods.uniquePlayers().call()]);\n\n      // Simplified state updates with less formatting\n      setTokenBalance(tokenBalance);\n      setTotalSupply(tokenSupply);\n\n      // Simplified jackpot value handling\n      setJackpotValue(web3.utils.fromWei(jackpotValue, 'ether'));\n      setNextJackpotValue(web3.utils.fromWei(nextJackpotValue, 'ether'));\n\n      // Direct conversion of token amounts\n      setGuessCost((window.BigInt(guessCost) / window.BigInt(10 ** 6)).toString());\n      setHintCost((window.BigInt(hintCost) / window.BigInt(10 ** 6)).toString());\n      setTotalWinners(totalWinners);\n      setUniquePlayers(uniquePlayers);\n\n      // Optional: Simplified bonding curve data (if needed)\n      try {\n        const poolInfo = await bondingCurve.methods.getPoolInfo().call();\n        setLiquidityValue(web3.utils.fromWei(poolInfo.actualS, 'ether'));\n        const currentPriceWei = await bondingCurve.methods.getCurrentPrice().call();\n        setTokenPrice(web3.utils.fromWei(currentPriceWei, 'ether'));\n      } catch (err) {\n        console.warn(\"Bonding curve data fetch failed:\", err);\n      }\n      if (isImportantMessage) {\n        setStatusMessage(currentMessage);\n      } else {\n        setStatusMessage('');\n      }\n    } catch (error) {\n      console.error(\"Contract data loading error:\", error);\n      setStatusMessage('Error loading data. Check connection.');\n    } finally {\n      setIsLoading(false);\n    }\n  }); // Add statusMessage as dependency\n\n  const buyTokens = async () => {\n    if (!bondingCurveContract || !web3 || !accounts[0] || !numTokens) {\n      setStatusMessage('Please connect wallet and enter token amount');\n      return;\n    }\n\n    // Convert input to base units (directly use the input)\n    const numTokensBaseUnits = Math.floor(parseFloat(numTokens));\n    try {\n      setIsLoading(true);\n      setStatusMessage('Calculating token price...');\n\n      // Calculate buy price from the contract\n      const costWei = await bondingCurveContract.methods.calculateBuyPrice(numTokensBaseUnits).call();\n\n      // Log for debugging\n      console.log('Num Tokens (Base Units):', numTokensBaseUnits);\n      console.log('Cost (Wei):', costWei);\n      console.log('Cost (Ether):', web3.utils.fromWei(costWei, 'ether'));\n      setStatusMessage(`Buying tokens... Please confirm in MetaMask (${web3.utils.fromWei(costWei, 'ether')} S)`);\n      await bondingCurveContract.methods.buy(numTokensBaseUnits).send({\n        from: accounts[0],\n        value: costWei\n      });\n      setStatusMessage('Tokens purchased successfully!');\n\n      // Reload contract data\n      await loadContractData(web3, jackpotContract, tokenContract, bondingCurveContract, accounts[0]);\n      setIsLoading(false);\n    } catch (error) {\n      console.error(\"Error buying tokens:\", error);\n      setStatusMessage('Error buying tokens. Please try again.');\n      setIsLoading(false);\n    }\n  };\n  const sellTokens = async () => {\n    if (!bondingCurveContract || !web3 || !accounts[0] || !numTokens) {\n      setStatusMessage('Please connect wallet and enter token amount');\n      return;\n    }\n\n    // Convert input to base units (directly use the input)\n    const numTokensBaseUnits = Math.floor(parseFloat(numTokens));\n    try {\n      setIsLoading(true);\n      setStatusMessage('Preparing to sell tokens...');\n\n      // Check if token is approved\n      const allowance = await tokenContract.methods.allowance(accounts[0], BONDING_CURVE_ADDRESS).call();\n\n      // Calculate sell price\n      const sellPriceWei = await bondingCurveContract.methods.calculateSellPrice(numTokensBaseUnits).call();\n      console.log('Num Tokens (Base Units):', numTokensBaseUnits);\n      console.log('Sell Price (Wei):', sellPriceWei);\n      console.log('Sell Price (Ether):', web3.utils.fromWei(sellPriceWei, 'ether'));\n\n      // Check if token is approved for the correct amount\n      if (parseInt(allowance) < parseInt(web3.utils.toWei(numTokens, 'ether'))) {\n        // Approve tokens\n        setStatusMessage('Approving tokens for sale... Please confirm in MetaMask');\n        await tokenContract.methods.approve(BONDING_CURVE_ADDRESS, web3.utils.toWei(numTokens, 'ether')).send({\n          from: accounts[0]\n        });\n      }\n      setStatusMessage(`Selling tokens... Please confirm in MetaMask (${web3.utils.fromWei(sellPriceWei, 'ether')} S)`);\n      await bondingCurveContract.methods.sell(numTokensBaseUnits).send({\n        from: accounts[0]\n      });\n      setStatusMessage('Tokens sold successfully!');\n\n      // Reload contract data\n      await loadContractData(web3, jackpotContract, tokenContract, bondingCurveContract, accounts[0]);\n      setIsLoading(false);\n    } catch (error) {\n      console.error(\"Error selling tokens:\", error);\n      setStatusMessage('Error selling tokens. Please try again.');\n      setIsLoading(false);\n    }\n  };\n  const getHint = async () => {\n    if (!jackpotContract || !web3 || !accounts[0]) {\n      setStatusMessage('Please connect wallet first');\n      return;\n    }\n    try {\n      setIsLoading(true);\n      setStatusMessage('Preparing to get hint...');\n\n      // Check if token is approved\n      const allowance = await tokenContract.methods.allowance(accounts[0], JACKPOT_ADDRESS).call();\n      const hintCostWei = await jackpotContract.methods.hintCost().call();\n      if (parseInt(allowance) < parseInt(hintCostWei)) {\n        setStatusMessage('Approving tokens for hint... Please confirm in MetaMask');\n        await tokenContract.methods.approve(JACKPOT_ADDRESS, hintCostWei).send({\n          from: accounts[0]\n        });\n      }\n      setStatusMessage('Purchasing hint... Please confirm in MetaMask');\n\n      // Request hint - this records the purchase on-chain\n      await jackpotContract.methods.requestHint().send({\n        from: accounts[0]\n      });\n\n      // Get the latest hint index\n      const hintIndex = parseInt(await jackpotContract.methods.hintCount().call()) - 1;\n\n      // Verify purchase was recorded\n      const hasAccess = await jackpotContract.methods.hasAccessToHint(accounts[0], hintIndex).call();\n      if (hasAccess) {\n        // Fetch hint from API\n        const hint = await getHintContent(hintIndex, accounts[0]);\n        setHintValue(hint);\n\n        // Cache in localStorage for offline access\n        if (hint && !hint.startsWith(\"Error\") && !hint.startsWith(\"Unable\")) {\n          localStorage.setItem(`hint_${accounts[0]}_${hintIndex}`, hint);\n        }\n\n        // Update purchased hints\n        setPurchasedHints(prev => [...prev, hintIndex]);\n        setStatusMessage('Hint purchased successfully!');\n      } else {\n        setStatusMessage('Error verifying hint purchase. Please try again.');\n      }\n\n      // Reload token balance\n      const tokenBalanceWei = await tokenContract.methods.balanceOf(accounts[0]).call();\n      setTokenBalance(tokenBalanceWei);\n      setIsLoading(false);\n    } catch (error) {\n      console.error(\"Error getting hint:\", error);\n      setStatusMessage('Error getting hint. Please try again.');\n      setIsLoading(false);\n    }\n  };\n  const makeGuess = async () => {\n    if (!jackpotContract || !web3 || !accounts[0] || !currentGuess) {\n      setStatusMessage('Please connect your wallet and enter a guess');\n      return;\n    }\n    try {\n      setIsLoading(true);\n      setStatusMessage('Preparing to make a guess...');\n\n      // First approve the tokens\n      const guessCostWei = await jackpotContract.methods.guessCost().call();\n      setStatusMessage('Approving tokens for guess... Please confirm in MetaMask');\n      await tokenContract.methods.approve(JACKPOT_ADDRESS, guessCostWei).send({\n        from: accounts[0]\n      });\n      setStatusMessage('Submitting guess... Please confirm in MetaMask');\n\n      // Submit the guess\n      const tx = await jackpotContract.methods.singleStepGuess(currentGuess).send({\n        from: accounts[0]\n      });\n      console.log(\"Transaction result:\", tx);\n\n      // Check if there are any events indicating success\n      let isWinner = false;\n\n      // Look for any GuessRevealed events\n      if (tx.events) {\n        const events = Object.values(tx.events);\n        for (const event of events) {\n          console.log(\"Event found:\", event.event, event.returnValues);\n          if (event.event === \"JackpotWon\") {\n            isWinner = true;\n            break;\n          }\n          if (event.event === \"GuessRevealed\" && event.returnValues && event.returnValues.won === true) {\n            isWinner = true;\n            break;\n          }\n        }\n      }\n\n      // Set the appropriate message\n      const resultMessage = isWinner ? '🎉 CONGRATULATIONS! Your guess was correct! You won the jackpot! 🎉' : 'Sorry, your guess was incorrect. Try again!';\n      setStatusMessage(resultMessage);\n      setIsLoading(false);\n\n      // Keep the message for 15 seconds before refreshing data\n      setTimeout(async () => {\n        if (setStatusMessage) {\n          // Check if component is still mounted\n          await loadContractData(web3, jackpotContract, tokenContract, bondingCurveContract, accounts[0]);\n          // Keep the message even after loading data\n          setStatusMessage(resultMessage);\n        }\n      }, 15000);\n    } catch (error) {\n      console.error(\"Error making guess:\", error);\n      setStatusMessage('Error submitting guess. Please try again.');\n      setIsLoading(false);\n    }\n  };\n\n  // Updated renderHintHistory function\n  const renderHintHistory = () => {\n    if (purchasedHints.length === 0) return null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hint-history\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Your Purchased Hints\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: purchasedHints.map(index => {\n          const hintKey = `hint_${accounts[0]}_${index}`;\n          const hintContent = localStorage.getItem(hintKey) || \"Loading hint...\";\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"hint-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"hint-number\",\n              children: [\"Hint #\", index + 1, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 15\n            }, this), \" \", hintContent]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 5\n    }, this);\n  };\n  useEffect(() => {\n    const initWeb3 = async () => {\n      if (window.ethereum) {\n        try {\n          setStatusMessage('Connecting to blockchain...');\n\n          // Request account access with timeout\n          const accounts = await Promise.race([window.ethereum.request({\n            method: 'eth_requestAccounts'\n          }), new Promise((_, reject) => setTimeout(() => reject(new Error('Connection timeout')), 10000))]);\n          if (accounts.length === 0) {\n            setStatusMessage('Please connect your wallet');\n            return;\n          }\n          const web3Instance = new Web3(window.ethereum);\n\n          // Initialize contracts with minimal information first\n          const jackpotInstance = new web3Instance.eth.Contract(JackpotGameABI.abi, JACKPOT_ADDRESS);\n          const tokenInstance = new web3Instance.eth.Contract(Token100xABI.abi, TOKEN_ADDRESS);\n          const bondingCurveInstance = new web3Instance.eth.Contract(BondingCurveABI.abi, BONDING_CURVE_ADDRESS);\n\n          // Set initial state\n          setWeb3(web3Instance);\n          setAccounts(accounts);\n          setJackpotContract(jackpotInstance);\n          setTokenContract(tokenInstance);\n          setBondingCurveContract(bondingCurveInstance);\n\n          // Load contract data\n          await loadContractData(web3Instance, jackpotInstance, tokenInstance, bondingCurveInstance, accounts[0]);\n        } catch (error) {\n          console.error(\"Web3 initialization error:\", error);\n          setStatusMessage(`Connection failed: ${error.message}`);\n        }\n      } else {\n        setStatusMessage('Please install a Web3 wallet like MetaMask');\n      }\n    };\n    initWeb3();\n  }, [JACKPOT_ADDRESS, TOKEN_ADDRESS, BONDING_CURVE_ADDRESS, loadContractData]);\n  useEffect(() => {\n    if (currentGuess && jackpotContract && web3 && accounts[0]) {}\n  }, [currentGuess, jackpotContract, web3, accounts]);\n  useEffect(() => {\n    if (jackpotContract && accounts.length > 0) {\n      loadPurchasedHints();\n    }\n  }, [jackpotContract, accounts, loadPurchasedHints]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"100X Jackpot Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"connected-wallet\",\n        children: [\"Connected: \", accounts.length > 0 ? formatAddress(accounts[0]) : 'Not connected']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 9\n      }, this), statusMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status-message\",\n        children: statusMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"app-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"game-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"section-title\",\n          children: \"Jackpot Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"jackpot-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"info-item\",\n            children: [\"Current Jackpot: \", jackpotValue, \" S\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 512,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"info-item\",\n            children: [\"Next Jackpot: \", nextJackpotValue, \" S\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"info-item\",\n            children: [\"Guess Cost: \", guessCost, \" 100X\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 514,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"info-item\",\n            children: [\"Hint Cost: \", hintCost, \" 100X\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 515,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"info-item\",\n            children: [\"Unique Players: \", uniquePlayers]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 516,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"info-item\",\n            children: [\"Total Winners: \", totalWinners]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 517,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"guess-input\",\n            placeholder: \"Enter your guess\",\n            value: currentGuess,\n            onChange: e => setCurrentGuess(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 521,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"guess-chance\",\n            children: \"Type your guess carefully, letter case matters!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"action-button make-guess-button\",\n            onClick: makeGuess,\n            disabled: isLoading,\n            children: \"Make Guess\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hint-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"action-button hint-button\",\n            onClick: getHint,\n            disabled: isLoading,\n            children: \"Buy Hint\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 13\n          }, this), hintValue && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"hint-value\",\n            children: [\"Hint: \", hintValue]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 546,\n            columnNumber: 27\n          }, this), renderHintHistory()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"token-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"section-title\",\n          children: \"100X Token\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"token-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"info-item\",\n            children: [\"Your Balance: \", formatTokenAmount(tokenBalance), \" 100X\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"info-item\",\n            children: [\"Total Supply: \", formatTokenAmount(totalSupply), \" 100X\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 555,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"info-item\",\n            children: [\"Current Price: \", tokenPrice, \" S\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 556,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"info-item\",\n            children: [\"Liquidity Pool: \", liquidityValue, \" S\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 557,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"token-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-toggle\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: `toggle-button ${buySellMode === 'buy' ? 'active' : ''}`,\n              onClick: () => setBuySellMode('buy'),\n              children: \"Buy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 562,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `toggle-button ${buySellMode === 'sell' ? 'active' : ''}`,\n              onClick: () => setBuySellMode('sell'),\n              children: \"Sell\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 568,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 561,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            className: \"token-amount-input\",\n            min: \"0\",\n            step: \"1\",\n            placeholder: \"Amount of tokens\",\n            value: numTokens,\n            onChange: e => setNumTokens(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 576,\n            columnNumber: 13\n          }, this), buySellMode === 'buy' ? /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"action-button buy-button\",\n            onClick: buyTokens,\n            disabled: isLoading,\n            children: \"Buy Tokens\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 587,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"action-button sell-button\",\n            onClick: sellTokens,\n            disabled: isLoading,\n            children: \"Sell Tokens\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 595,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"app-footer\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"DeFAI Hackathon Project - Sonic Chain - 2024\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 609,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 501,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"wAfjqJD1ob5Y1MwdQLO3BP1Ca1w=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Web3","JackpotGameABI","Token100xABI","BondingCurveABI","jsxDEV","_jsxDEV","App","_s","nextJackpotValue","setNextJackpotValue","guessCost","setGuessCost","web3","setWeb3","accounts","setAccounts","jackpotContract","setJackpotContract","tokenContract","setTokenContract","bondingCurveContract","setBondingCurveContract","currentGuess","setCurrentGuess","jackpotValue","setJackpotValue","hintValue","setHintValue","liquidityValue","setLiquidityValue","tokenPrice","setTokenPrice","numTokens","setNumTokens","totalSupply","setTotalSupply","buySellMode","setBuySellMode","hintCost","setHintCost","tokenBalance","setTokenBalance","uniquePlayers","setUniquePlayers","totalWinners","setTotalWinners","isLoading","setIsLoading","statusMessage","setStatusMessage","purchasedHints","setPurchasedHints","JACKPOT_ADDRESS","process","env","REACT_APP_JACKPOT_ADDRESS","TOKEN_ADDRESS","REACT_APP_TOKEN_ADDRESS","BONDING_CURVE_ADDRESS","REACT_APP_BONDING_CURVE_ADDRESS","formatAddress","address","substring","length","formatTokenAmount","amount","amountStr","toString","amountBN","utils","BN","tokenAmount","div","parsedAmount","parseFloat","billionsAmount","toLocaleString","undefined","maximumFractionDigits","millionsAmount","thousandsAmount","error","console","getHintContent","hintIndex","userAddress","response","fetch","ok","data","json","hintContent","loadPurchasedHints","hintTotal","parseInt","methods","hintCount","call","purchased","hintAccessPromises","Array","from","_","i","hasAccess","hasAccessToHint","hintAccess","Promise","all","filter","index","latestHintIndex","hint","loadContractData","jackpot","token","bondingCurve","account","currentMessage","isImportantMessage","includes","tokenSupply","balanceOf","jackpotAmount","nextJackpotAmount","fromWei","window","BigInt","poolInfo","getPoolInfo","actualS","currentPriceWei","getCurrentPrice","err","warn","buyTokens","numTokensBaseUnits","Math","floor","costWei","calculateBuyPrice","log","buy","send","value","sellTokens","allowance","sellPriceWei","calculateSellPrice","toWei","approve","sell","getHint","hintCostWei","requestHint","startsWith","localStorage","setItem","prev","tokenBalanceWei","makeGuess","guessCostWei","tx","singleStepGuess","isWinner","events","Object","values","event","returnValues","won","resultMessage","setTimeout","renderHintHistory","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","hintKey","getItem","initWeb3","ethereum","race","request","method","reject","Error","web3Instance","jackpotInstance","eth","Contract","abi","tokenInstance","bondingCurveInstance","message","type","placeholder","onChange","e","target","onClick","disabled","min","step","_c","$RefreshReg$"],"sources":["C:/Users/jdcju/Desktop/100xJackpotNew/frontend/src/app.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport Web3 from 'web3';\nimport JackpotGameABI from './abi/JackpotGame.json';\nimport Token100xABI from './abi/Token100x.json';\nimport BondingCurveABI from './abi/BondingCurve.json';\n\nconst App = () => {\n  // State variables\n  const [nextJackpotValue, setNextJackpotValue] = useState('0');\n  const [guessCost, setGuessCost] = useState('0');\n  const [web3, setWeb3] = useState(null);\n  const [accounts, setAccounts] = useState([]);\n  const [jackpotContract, setJackpotContract] = useState(null);\n  const [tokenContract, setTokenContract] = useState(null);\n  const [bondingCurveContract, setBondingCurveContract] = useState(null);\n  \n  const [currentGuess, setCurrentGuess] = useState('');\n  const [jackpotValue, setJackpotValue] = useState('0');\n  const [hintValue, setHintValue] = useState('');\n  const [liquidityValue, setLiquidityValue] = useState('0');\n  const [tokenPrice, setTokenPrice] = useState('0');\n  const [numTokens, setNumTokens] = useState('1');\n  const [totalSupply, setTotalSupply] = useState('0');\n  const [buySellMode, setBuySellMode] = useState('buy');\n  const [hintCost, setHintCost] = useState('0');\n  const [tokenBalance, setTokenBalance] = useState('0');\n  const [uniquePlayers, setUniquePlayers] = useState(0);\n  const [totalWinners, setTotalWinners] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [statusMessage, setStatusMessage] = useState('');\n  const [purchasedHints, setPurchasedHints] = useState([]);\n  \n  const JACKPOT_ADDRESS = process.env.REACT_APP_JACKPOT_ADDRESS || '0x1bCb1B4474b636874E1C35B0CC32ADb408bb43e0';\n  const TOKEN_ADDRESS = process.env.REACT_APP_TOKEN_ADDRESS || '0x0755fb9917419a08c90a0Fd245F119202844ec3D';\n  const BONDING_CURVE_ADDRESS = process.env.REACT_APP_BONDING_CURVE_ADDRESS || '0x2ECA93adD34C533008b947B2Ed02e4974122D525';\n\n  // Format address for display\n  const formatAddress = (address) => {\n    if (!address || address === '0x0000000000000000000000000000000000000000') return 'None';\n    return `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;\n  };\n\n  // Format large numbers properly\n  const formatTokenAmount = (amount) => {\n    if (!amount || amount === '0') return '0';\n    \n    try {\n      // Convert from base units to tokens (6 decimals)\n      const amountStr = amount.toString(); // Ensure we have a string\n      const amountBN = new Web3.utils.BN(amountStr);\n      const tokenAmount = amountBN.div(new Web3.utils.BN(10 ** 6));\n      const parsedAmount = parseFloat(tokenAmount.toString());\n\n      // Format for very large numbers\n      if (parsedAmount >= 1_000_000_000) {\n        const billionsAmount = parsedAmount / 1_000_000_000;\n        return `${billionsAmount.toLocaleString(undefined, {maximumFractionDigits: 0})}B`;\n      } else if (parsedAmount >= 1_000_000) {\n        const millionsAmount = parsedAmount / 1_000_000;\n        return `${millionsAmount.toLocaleString(undefined, {maximumFractionDigits: 0})}M`;\n      } else if (parsedAmount >= 1_000) {\n        const thousandsAmount = parsedAmount / 1_000;\n        return `${thousandsAmount.toLocaleString(undefined, {maximumFractionDigits: 0})}k`;\n      } else {\n        return parsedAmount.toLocaleString(undefined, {maximumFractionDigits: 6});\n      }\n    } catch (error) {\n      console.error('Error formatting token amount:', error, 'Input:', amount);\n      return '0';\n    }\n  };\n// Add this function to fetch hint content from the API\nconst getHintContent = useCallback(async (hintIndex, userAddress) => {\n  try {\n    const response = await fetch(`/.netlify/functions/getHint?hintIndex=${hintIndex}&userAddress=${userAddress}`);\n    \n    if (response.ok) {\n      const data = await response.json();\n      return data.hintContent;\n    } else {\n      const error = await response.json();\n      console.error(\"Error fetching hint:\", error);\n      return \"Error retrieving hint\";\n    }\n  } catch (error) {\n    console.error(\"Error connecting to hint API:\", error);\n    return \"Unable to connect to hint server\";\n  }\n}, []); // Empty dependency array since it doesn't depend on external variables\n// Updated loadPurchasedHints function\nconst loadPurchasedHints = useCallback(async () => {\n  if (!jackpotContract || !accounts[0]) return;\n  \n  try {\n    const hintTotal = parseInt(await jackpotContract.methods.hintCount().call());\n    let purchased = [];\n    \n    // Concurrent hint access checks\n    const hintAccessPromises = Array.from({length: hintTotal}, async (_, i) => {\n      const hasAccess = await jackpotContract.methods.hasAccessToHint(accounts[0], i).call();\n      return hasAccess ? i : null;\n    });\n    \n    const hintAccess = await Promise.all(hintAccessPromises);\n    \n    purchased = hintAccess.filter(index => index !== null);\n    setPurchasedHints(purchased);\n    \n    // Set most recent hint if available\n    if (purchased.length > 0) {\n      const latestHintIndex = purchased[purchased.length - 1];\n      const hint = await getHintContent(latestHintIndex, accounts[0]);\n      setHintValue(hint);\n    }\n  } catch (error) {\n    console.error(\"Error loading purchased hints:\", error);\n  }\n}, [jackpotContract, accounts, getHintContent]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const loadContractData = useCallback(async (web3, jackpot, token, bondingCurve, account) => {\n    try {\n      setIsLoading(true);\n          \n    // Save the current message if it's important (contains certain keywords)\n    const currentMessage = statusMessage;\n    const isImportantMessage = currentMessage.includes('CONGRATULATIONS') || \n                              currentMessage.includes('correct') ||\n                              currentMessage.includes('incorrect');\n    \n    if (!isImportantMessage) {\n      setStatusMessage('Loading contract data...');\n    }\n  \n      // Use Promise.all for concurrent calls\n      const [\n        tokenBalance,\n        tokenSupply,\n        jackpotValue,\n        nextJackpotValue,\n        guessCost,\n        hintCost,\n        totalWinners,\n        uniquePlayers\n      ] = await Promise.all([\n        token.methods.balanceOf(account).call(),\n        token.methods.totalSupply().call(),\n        jackpot.methods.jackpotAmount().call(),\n        jackpot.methods.nextJackpotAmount().call(),\n        jackpot.methods.guessCost().call(),\n        jackpot.methods.hintCost().call(),\n        jackpot.methods.totalWinners().call(),\n        jackpot.methods.uniquePlayers().call()\n      ]);\n  \n      // Simplified state updates with less formatting\n      setTokenBalance(tokenBalance);\n      setTotalSupply(tokenSupply);\n      \n      // Simplified jackpot value handling\n      setJackpotValue(web3.utils.fromWei(jackpotValue, 'ether'));\n      setNextJackpotValue(web3.utils.fromWei(nextJackpotValue, 'ether'));\n      \n      // Direct conversion of token amounts\n      setGuessCost((window.BigInt(guessCost) / window.BigInt(10 ** 6)).toString());\n      setHintCost((window.BigInt(hintCost) / window.BigInt(10 ** 6)).toString());\n      \n      setTotalWinners(totalWinners);\n      setUniquePlayers(uniquePlayers);\n  \n      // Optional: Simplified bonding curve data (if needed)\n      try {\n        const poolInfo = await bondingCurve.methods.getPoolInfo().call();\n        setLiquidityValue(web3.utils.fromWei(poolInfo.actualS, 'ether'));\n        const currentPriceWei = await bondingCurve.methods.getCurrentPrice().call();\n        setTokenPrice(web3.utils.fromWei(currentPriceWei, 'ether'));\n      } catch (err) {\n        console.warn(\"Bonding curve data fetch failed:\", err);\n      }\n      if (isImportantMessage) {\n        setStatusMessage(currentMessage);\n      } else {\n        setStatusMessage('');\n      }\n    } catch (error) {\n      console.error(\"Contract data loading error:\", error);\n      setStatusMessage('Error loading data. Check connection.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, ); // Add statusMessage as dependency\n\n  const buyTokens = async () => {\n    if (!bondingCurveContract || !web3 || !accounts[0] || !numTokens) {\n      setStatusMessage('Please connect wallet and enter token amount');\n      return;\n    }\n    \n    // Convert input to base units (directly use the input)\n    const numTokensBaseUnits = Math.floor(parseFloat(numTokens));\n    \n    try {\n      setIsLoading(true);\n      setStatusMessage('Calculating token price...');\n      \n      // Calculate buy price from the contract\n      const costWei = await bondingCurveContract.methods.calculateBuyPrice(numTokensBaseUnits).call();\n      \n      // Log for debugging\n      console.log('Num Tokens (Base Units):', numTokensBaseUnits);\n      console.log('Cost (Wei):', costWei);\n      console.log('Cost (Ether):', web3.utils.fromWei(costWei, 'ether'));\n      \n      setStatusMessage(`Buying tokens... Please confirm in MetaMask (${web3.utils.fromWei(costWei, 'ether')} S)`);\n      \n      await bondingCurveContract.methods.buy(numTokensBaseUnits).send({\n        from: accounts[0],\n        value: costWei\n      });\n      \n      setStatusMessage('Tokens purchased successfully!');\n      \n      // Reload contract data\n      await loadContractData(web3, jackpotContract, tokenContract, bondingCurveContract, accounts[0]);\n      setIsLoading(false);\n    } catch (error) {\n      console.error(\"Error buying tokens:\", error);\n      setStatusMessage('Error buying tokens. Please try again.');\n      setIsLoading(false);\n    }\n  };\n\n  const sellTokens = async () => {\n    if (!bondingCurveContract || !web3 || !accounts[0] || !numTokens) {\n      setStatusMessage('Please connect wallet and enter token amount');\n      return;\n    }\n    \n    // Convert input to base units (directly use the input)\n    const numTokensBaseUnits = Math.floor(parseFloat(numTokens));\n    \n    try {\n      setIsLoading(true);\n      setStatusMessage('Preparing to sell tokens...');\n      \n      // Check if token is approved\n      const allowance = await tokenContract.methods.allowance(accounts[0], BONDING_CURVE_ADDRESS).call();\n  \n      // Calculate sell price\n      const sellPriceWei = await bondingCurveContract.methods.calculateSellPrice(numTokensBaseUnits).call();\n      \n      console.log('Num Tokens (Base Units):', numTokensBaseUnits);\n      console.log('Sell Price (Wei):', sellPriceWei);\n      console.log('Sell Price (Ether):', web3.utils.fromWei(sellPriceWei, 'ether'));\n      \n      // Check if token is approved for the correct amount\n      if (parseInt(allowance) < parseInt(web3.utils.toWei(numTokens, 'ether'))) {\n        // Approve tokens\n        setStatusMessage('Approving tokens for sale... Please confirm in MetaMask');\n        await tokenContract.methods.approve(BONDING_CURVE_ADDRESS, web3.utils.toWei(numTokens, 'ether')).send({\n          from: accounts[0]\n        });\n      }\n      \n      setStatusMessage(`Selling tokens... Please confirm in MetaMask (${web3.utils.fromWei(sellPriceWei, 'ether')} S)`);\n      \n      await bondingCurveContract.methods.sell(numTokensBaseUnits).send({\n        from: accounts[0]\n      });\n      \n      setStatusMessage('Tokens sold successfully!');\n      \n      // Reload contract data\n      await loadContractData(web3, jackpotContract, tokenContract, bondingCurveContract, accounts[0]);\n      setIsLoading(false);\n    } catch (error) {\n      console.error(\"Error selling tokens:\", error);\n      setStatusMessage('Error selling tokens. Please try again.');\n      setIsLoading(false);\n    }\n  };\n\n  const getHint = async () => {\n    if (!jackpotContract || !web3 || !accounts[0]) {\n      setStatusMessage('Please connect wallet first');\n      return;\n    }\n    \n    try {\n      setIsLoading(true);\n      setStatusMessage('Preparing to get hint...');\n      \n      // Check if token is approved\n      const allowance = await tokenContract.methods.allowance(accounts[0], JACKPOT_ADDRESS).call();\n      const hintCostWei = await jackpotContract.methods.hintCost().call();\n      \n      if (parseInt(allowance) < parseInt(hintCostWei)) {\n        setStatusMessage('Approving tokens for hint... Please confirm in MetaMask');\n        await tokenContract.methods.approve(JACKPOT_ADDRESS, hintCostWei).send({\n          from: accounts[0]\n        });\n      }\n      \n      setStatusMessage('Purchasing hint... Please confirm in MetaMask');\n      \n      // Request hint - this records the purchase on-chain\n      await jackpotContract.methods.requestHint().send({\n        from: accounts[0]\n      });\n      \n      // Get the latest hint index\n      const hintIndex = parseInt(await jackpotContract.methods.hintCount().call()) - 1;\n      \n      // Verify purchase was recorded\n      const hasAccess = await jackpotContract.methods.hasAccessToHint(accounts[0], hintIndex).call();\n      \n      if (hasAccess) {\n        // Fetch hint from API\n        const hint = await getHintContent(hintIndex, accounts[0]);\n        setHintValue(hint);\n        \n        // Cache in localStorage for offline access\n        if (hint && !hint.startsWith(\"Error\") && !hint.startsWith(\"Unable\")) {\n          localStorage.setItem(`hint_${accounts[0]}_${hintIndex}`, hint);\n        }\n        \n        // Update purchased hints\n        setPurchasedHints(prev => [...prev, hintIndex]);\n        setStatusMessage('Hint purchased successfully!');\n      } else {\n        setStatusMessage('Error verifying hint purchase. Please try again.');\n      }\n      \n      // Reload token balance\n      const tokenBalanceWei = await tokenContract.methods.balanceOf(accounts[0]).call();\n      setTokenBalance(tokenBalanceWei);\n      setIsLoading(false);\n    } catch (error) {\n      console.error(\"Error getting hint:\", error);\n      setStatusMessage('Error getting hint. Please try again.');\n      setIsLoading(false);\n    }\n  };\n\n\n  const makeGuess = async () => {\n    if (!jackpotContract || !web3 || !accounts[0] || !currentGuess) {\n      setStatusMessage('Please connect your wallet and enter a guess');\n      return;\n    }\n    \n    try {\n      setIsLoading(true);\n      setStatusMessage('Preparing to make a guess...');\n      \n      // First approve the tokens\n      const guessCostWei = await jackpotContract.methods.guessCost().call();\n      \n      setStatusMessage('Approving tokens for guess... Please confirm in MetaMask');\n      await tokenContract.methods.approve(JACKPOT_ADDRESS, guessCostWei).send({\n        from: accounts[0]\n      });\n      \n      setStatusMessage('Submitting guess... Please confirm in MetaMask');\n      \n      // Submit the guess\n      const tx = await jackpotContract.methods.singleStepGuess(currentGuess).send({\n        from: accounts[0]\n      });\n      \n      console.log(\"Transaction result:\", tx);\n      \n      // Check if there are any events indicating success\n      let isWinner = false;\n      \n      // Look for any GuessRevealed events\n      if (tx.events) {\n        const events = Object.values(tx.events);\n        for (const event of events) {\n          console.log(\"Event found:\", event.event, event.returnValues);\n          \n          if (event.event === \"JackpotWon\") {\n            isWinner = true;\n            break;\n          }\n          \n          if (event.event === \"GuessRevealed\" && event.returnValues && event.returnValues.won === true) {\n            isWinner = true;\n            break;\n          }\n        }\n      }\n      \n      // Set the appropriate message\n      const resultMessage = isWinner\n        ? '🎉 CONGRATULATIONS! Your guess was correct! You won the jackpot! 🎉'\n        : 'Sorry, your guess was incorrect. Try again!';\n      \n      setStatusMessage(resultMessage);\n      setIsLoading(false);\n      \n      // Keep the message for 15 seconds before refreshing data\n      setTimeout(async () => {\n        if (setStatusMessage) { // Check if component is still mounted\n          await loadContractData(web3, jackpotContract, tokenContract, bondingCurveContract, accounts[0]);\n          // Keep the message even after loading data\n          setStatusMessage(resultMessage);\n        }\n      }, 15000);\n      \n    } catch (error) {\n      console.error(\"Error making guess:\", error);\n      setStatusMessage('Error submitting guess. Please try again.');\n      setIsLoading(false);\n    }\n  };\n\n// Updated renderHintHistory function\nconst renderHintHistory = () => {\n  if (purchasedHints.length === 0) return null;\n  \n  return (\n    <div className=\"hint-history\">\n      <h3>Your Purchased Hints</h3>\n      <ul>\n        {purchasedHints.map(index => {\n          const hintKey = `hint_${accounts[0]}_${index}`;\n          const hintContent = localStorage.getItem(hintKey) || \"Loading hint...\";\n          \n          return (\n            <li key={index} className=\"hint-item\">\n              <span className=\"hint-number\">Hint #{index + 1}:</span> {hintContent}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nuseEffect(() => {\n  const initWeb3 = async () => {\n    if (window.ethereum) {\n      try {\n        setStatusMessage('Connecting to blockchain...');\n        \n        // Request account access with timeout\n        const accounts = await Promise.race([\n          window.ethereum.request({ method: 'eth_requestAccounts' }),\n          new Promise((_, reject) => \n            setTimeout(() => reject(new Error('Connection timeout')), 10000)\n          )\n        ]);\n\n        if (accounts.length === 0) {\n          setStatusMessage('Please connect your wallet');\n          return;\n        }\n\n        const web3Instance = new Web3(window.ethereum);\n        \n        // Initialize contracts with minimal information first\n        const jackpotInstance = new web3Instance.eth.Contract(JackpotGameABI.abi, JACKPOT_ADDRESS);\n        const tokenInstance = new web3Instance.eth.Contract(Token100xABI.abi, TOKEN_ADDRESS);\n        const bondingCurveInstance = new web3Instance.eth.Contract(BondingCurveABI.abi, BONDING_CURVE_ADDRESS);\n        \n        // Set initial state\n        setWeb3(web3Instance);\n        setAccounts(accounts);\n        setJackpotContract(jackpotInstance);\n        setTokenContract(tokenInstance);\n        setBondingCurveContract(bondingCurveInstance);\n\n        // Load contract data\n        await loadContractData(web3Instance, jackpotInstance, tokenInstance, bondingCurveInstance, accounts[0]);\n      } catch (error) {\n        console.error(\"Web3 initialization error:\", error);\n        setStatusMessage(`Connection failed: ${error.message}`);\n      }\n    } else {\n      setStatusMessage('Please install a Web3 wallet like MetaMask');\n    }\n  };\n  \n  initWeb3();\n}, [JACKPOT_ADDRESS, TOKEN_ADDRESS, BONDING_CURVE_ADDRESS, loadContractData]);\n\n  useEffect(() => {\n    if (currentGuess && jackpotContract && web3 && accounts[0]) {\n      \n    }\n  }, [currentGuess, jackpotContract, web3, accounts]);\n\n  useEffect(() => {\n    if (jackpotContract && accounts.length > 0) {\n      loadPurchasedHints();\n    }\n  }, [jackpotContract, accounts, loadPurchasedHints]);\n\n  return (\n    <div className=\"app-container\">\n      <header className=\"app-header\">\n        <h1 className=\"title\">100X Jackpot Game</h1>\n        <p className=\"connected-wallet\">Connected: {accounts.length > 0 ? formatAddress(accounts[0]) : 'Not connected'}</p>\n        {statusMessage && <p className=\"status-message\">{statusMessage}</p>}\n      </header>\n      \n      <main className=\"app-main\">\n        <section className=\"game-section\">\n          <h2 className=\"section-title\">Jackpot Game</h2>\n          <div className=\"jackpot-info\">\n            <p className=\"info-item\">Current Jackpot: {jackpotValue} S</p>\n            <p className=\"info-item\">Next Jackpot: {nextJackpotValue} S</p>\n            <p className=\"info-item\">Guess Cost: {guessCost} 100X</p>\n            <p className=\"info-item\">Hint Cost: {hintCost} 100X</p>\n            <p className=\"info-item\">Unique Players: {uniquePlayers}</p>\n            <p className=\"info-item\">Total Winners: {totalWinners}</p>\n          </div>\n          \n          <div className=\"game-controls\">\n            <input \n              type=\"text\" \n              className=\"guess-input\"\n              placeholder=\"Enter your guess\" \n              value={currentGuess} \n              onChange={(e) => setCurrentGuess(e.target.value)}\n            />\n            <p className=\"guess-chance\">Type your guess carefully, letter case matters!</p>\n            <button \n              className=\"action-button make-guess-button\" \n              onClick={makeGuess}\n              disabled={isLoading}\n            >\n              Make Guess\n            </button>\n          </div>\n          \n          <div className=\"hint-section\">\n            <button \n              className=\"action-button hint-button\" \n              onClick={getHint}\n              disabled={isLoading}\n            >\n              Buy Hint\n            </button>\n            {hintValue && <p className=\"hint-value\">Hint: {hintValue}</p>}\n            {renderHintHistory()}\n          </div>\n        </section>\n        \n        <section className=\"token-section\">\n          <h2 className=\"section-title\">100X Token</h2>\n          <div className=\"token-info\">\n            <p className=\"info-item\">Your Balance: {formatTokenAmount(tokenBalance)} 100X</p>\n            <p className=\"info-item\">Total Supply: {formatTokenAmount(totalSupply)} 100X</p>\n            <p className=\"info-item\">Current Price: {tokenPrice} S</p>\n            <p className=\"info-item\">Liquidity Pool: {liquidityValue} S</p>\n          </div>\n          \n          <div className=\"token-controls\">\n            <div className=\"mode-toggle\">\n              <button \n                className={`toggle-button ${buySellMode === 'buy' ? 'active' : ''}`}\n                onClick={() => setBuySellMode('buy')}\n              >\n                Buy\n              </button>\n              <button \n                className={`toggle-button ${buySellMode === 'sell' ? 'active' : ''}`}\n                onClick={() => setBuySellMode('sell')}\n              >\n                Sell\n              </button>\n            </div>\n            \n            <input \n              type=\"number\" \n              className=\"token-amount-input\"\n              min=\"0\" \n              step=\"1\" \n              placeholder=\"Amount of tokens\" \n              value={numTokens} \n              onChange={(e) => setNumTokens(e.target.value)}\n            />\n            \n            {buySellMode === 'buy' ? (\n              <button \n                className=\"action-button buy-button\" \n                onClick={buyTokens}\n                disabled={isLoading}\n              >\n                Buy Tokens\n              </button>\n            ) : (\n              <button \n                className=\"action-button sell-button\" \n                onClick={sellTokens}\n                disabled={isLoading}\n              >\n                Sell Tokens\n              </button>\n            )}\n          </div>\n        </section>\n        \n       \n      </main>\n      \n      <footer className=\"app-footer\">\n        <p>DeFAI Hackathon Project - Sonic Chain - 2024</p>\n      </footer>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}