{"ast":null,"code":"import React,{useState,useEffect,useCallback}from'react';import Web3 from'web3';import JackpotGameABI from'./abi/JackpotGame.json';import Token100xABI from'./abi/Token100x.json';import BondingCurveABI from'./abi/BondingCurve.json';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const App=()=>{// State variables\nconst[nextJackpotValue,setNextJackpotValue]=useState('0');const[guessCost,setGuessCost]=useState('0');const[web3,setWeb3]=useState(null);const[accounts,setAccounts]=useState([]);const[jackpotContract,setJackpotContract]=useState(null);const[tokenContract,setTokenContract]=useState(null);const[bondingCurveContract,setBondingCurveContract]=useState(null);const[currentGuess,setCurrentGuess]=useState('');const[guessChance,setGuessChance]=useState('0');const[jackpotValue,setJackpotValue]=useState('0');const[hintValue,setHintValue]=useState('');const[liquidityValue,setLiquidityValue]=useState('0');const[tokenPrice,setTokenPrice]=useState('0');const[numTokens,setNumTokens]=useState('1');const[totalSupply,setTotalSupply]=useState('0');const[buySellMode,setBuySellMode]=useState('buy');const[hintCost,setHintCost]=useState('0');const[tokenBalance,setTokenBalance]=useState('0');const[uniquePlayers,setUniquePlayers]=useState(0);const[totalWinners,setTotalWinners]=useState(0);const[isLoading,setIsLoading]=useState(false);const[statusMessage,setStatusMessage]=useState('');const[purchasedHints,setPurchasedHints]=useState([]);const JACKPOT_ADDRESS=process.env.REACT_APP_JACKPOT_ADDRESS||'0x1bCb1B4474b636874E1C35B0CC32ADb408bb43e0';const TOKEN_ADDRESS=process.env.REACT_APP_TOKEN_ADDRESS||'0x0755fb9917419a08c90a0Fd245F119202844ec3D';const BONDING_CURVE_ADDRESS=process.env.REACT_APP_BONDING_CURVE_ADDRESS||'0x2ECA93adD34C533008b947B2Ed02e4974122D525';// Format address for display\nconst formatAddress=address=>{if(!address||address==='0x0000000000000000000000000000000000000000')return'None';return`${address.substring(0,6)}...${address.substring(address.length-4)}`;};// Format large numbers properly\nconst formatTokenAmount=amount=>{if(!amount||amount==='0')return'0';try{// Convert from base units to tokens (6 decimals)\nconst amountStr=amount.toString();// Ensure we have a string\nconst amountBN=new Web3.utils.BN(amountStr);const tokenAmount=amountBN.div(new Web3.utils.BN(10**6));const parsedAmount=parseFloat(tokenAmount.toString());// Format for very large numbers\nif(parsedAmount>=1000000000){const billionsAmount=parsedAmount/1000000000;return`${billionsAmount.toLocaleString(undefined,{maximumFractionDigits:0})}B`;}else if(parsedAmount>=1000000){const millionsAmount=parsedAmount/1000000;return`${millionsAmount.toLocaleString(undefined,{maximumFractionDigits:0})}M`;}else if(parsedAmount>=1000){const thousandsAmount=parsedAmount/1000;return`${thousandsAmount.toLocaleString(undefined,{maximumFractionDigits:0})}k`;}else{return parsedAmount.toLocaleString(undefined,{maximumFractionDigits:6});}}catch(error){console.error('Error formatting token amount:',error,'Input:',amount);return'0';}};// Add this function to fetch hint content from the API\nconst getHintContent=async(hintIndex,userAddress)=>{try{const response=await fetch(`/.netlify/functions/getHint?hintIndex=${hintIndex}&userAddress=${userAddress}`);if(response.ok){const data=await response.json();return data.hintContent;}else{const error=await response.json();console.error(\"Error fetching hint:\",error);return\"Error retrieving hint\";}}catch(error){console.error(\"Error connecting to hint API:\",error);return\"Unable to connect to hint server\";}};// Updated loadPurchasedHints function\nconst loadPurchasedHints=useCallback(async()=>{if(!jackpotContract||!accounts[0])return;try{const hintTotal=parseInt(await jackpotContract.methods.hintCount().call());let purchased=[];// Concurrent hint access checks\nconst hintAccessPromises=Array.from({length:hintTotal},async(_,i)=>{const hasAccess=await jackpotContract.methods.hasAccessToHint(accounts[0],i).call();return hasAccess?i:null;});const hintAccess=await Promise.all(hintAccessPromises);purchased=hintAccess.filter(index=>index!==null);setPurchasedHints(purchased);// Set most recent hint if available\nif(purchased.length>0){const latestHintIndex=purchased[purchased.length-1];const hint=await getHintContent(latestHintIndex,accounts[0]);setHintValue(hint);}}catch(error){console.error(\"Error loading purchased hints:\",error);}},[jackpotContract,accounts,getHintContent]);// eslint-disable-next-line react-hooks/exhaustive-deps\nconst loadContractData=useCallback(async(web3,jackpot,token,bondingCurve,account)=>{try{setIsLoading(true);setStatusMessage('Loading contract data...');// Use Promise.all for concurrent calls\nconst[tokenBalance,tokenSupply,jackpotValue,nextJackpotValue,guessCost,hintCost,totalWinners,uniquePlayers]=await Promise.all([token.methods.balanceOf(account).call(),token.methods.totalSupply().call(),jackpot.methods.jackpotAmount().call(),jackpot.methods.nextJackpotAmount().call(),jackpot.methods.guessCost().call(),jackpot.methods.hintCost().call(),jackpot.methods.totalWinners().call(),jackpot.methods.uniquePlayers().call()]);// Simplified state updates with less formatting\nsetTokenBalance(tokenBalance);setTotalSupply(tokenSupply);// Simplified jackpot value handling\nsetJackpotValue(web3.utils.fromWei(jackpotValue,'ether'));setNextJackpotValue(web3.utils.fromWei(nextJackpotValue,'ether'));// Direct conversion of token amounts\nsetGuessCost((window.BigInt(guessCost)/window.BigInt(10**6)).toString());setHintCost((window.BigInt(hintCost)/window.BigInt(10**6)).toString());setTotalWinners(totalWinners);setUniquePlayers(uniquePlayers);// Optional: Simplified bonding curve data (if needed)\ntry{const poolInfo=await bondingCurve.methods.getPoolInfo().call();setLiquidityValue(web3.utils.fromWei(poolInfo.actualS,'ether'));const currentPriceWei=await bondingCurve.methods.getCurrentPrice().call();setTokenPrice(web3.utils.fromWei(currentPriceWei,'ether'));}catch(err){console.warn(\"Bonding curve data fetch failed:\",err);}setStatusMessage('');}catch(error){console.error(\"Contract data loading error:\",error);setStatusMessage('Error loading data. Check connection.');}finally{setIsLoading(false);}},[]);const buyTokens=async()=>{if(!bondingCurveContract||!web3||!accounts[0]||!numTokens){setStatusMessage('Please connect wallet and enter token amount');return;}// Convert input to base units (directly use the input)\nconst numTokensBaseUnits=Math.floor(parseFloat(numTokens));try{setIsLoading(true);setStatusMessage('Calculating token price...');// Calculate buy price from the contract\nconst costWei=await bondingCurveContract.methods.calculateBuyPrice(numTokensBaseUnits).call();// Log for debugging\nconsole.log('Num Tokens (Base Units):',numTokensBaseUnits);console.log('Cost (Wei):',costWei);console.log('Cost (Ether):',web3.utils.fromWei(costWei,'ether'));setStatusMessage(`Buying tokens... Please confirm in MetaMask (${web3.utils.fromWei(costWei,'ether')} S)`);await bondingCurveContract.methods.buy(numTokensBaseUnits).send({from:accounts[0],value:costWei});setStatusMessage('Tokens purchased successfully!');// Reload contract data\nawait loadContractData(web3,jackpotContract,tokenContract,bondingCurveContract,accounts[0]);setIsLoading(false);}catch(error){console.error(\"Error buying tokens:\",error);setStatusMessage('Error buying tokens. Please try again.');setIsLoading(false);}};const sellTokens=async()=>{if(!bondingCurveContract||!web3||!accounts[0]||!numTokens){setStatusMessage('Please connect wallet and enter token amount');return;}// Convert input to base units (directly use the input)\nconst numTokensBaseUnits=Math.floor(parseFloat(numTokens));try{setIsLoading(true);setStatusMessage('Preparing to sell tokens...');// Check if token is approved\nconst allowance=await tokenContract.methods.allowance(accounts[0],BONDING_CURVE_ADDRESS).call();// Calculate sell price\nconst sellPriceWei=await bondingCurveContract.methods.calculateSellPrice(numTokensBaseUnits).call();console.log('Num Tokens (Base Units):',numTokensBaseUnits);console.log('Sell Price (Wei):',sellPriceWei);console.log('Sell Price (Ether):',web3.utils.fromWei(sellPriceWei,'ether'));// Check if token is approved for the correct amount\nif(parseInt(allowance)<parseInt(web3.utils.toWei(numTokens,'ether'))){// Approve tokens\nsetStatusMessage('Approving tokens for sale... Please confirm in MetaMask');await tokenContract.methods.approve(BONDING_CURVE_ADDRESS,web3.utils.toWei(numTokens,'ether')).send({from:accounts[0]});}setStatusMessage(`Selling tokens... Please confirm in MetaMask (${web3.utils.fromWei(sellPriceWei,'ether')} S)`);await bondingCurveContract.methods.sell(numTokensBaseUnits).send({from:accounts[0]});setStatusMessage('Tokens sold successfully!');// Reload contract data\nawait loadContractData(web3,jackpotContract,tokenContract,bondingCurveContract,accounts[0]);setIsLoading(false);}catch(error){console.error(\"Error selling tokens:\",error);setStatusMessage('Error selling tokens. Please try again.');setIsLoading(false);}};const getHint=async()=>{if(!jackpotContract||!web3||!accounts[0]){setStatusMessage('Please connect wallet first');return;}try{setIsLoading(true);setStatusMessage('Preparing to get hint...');// Check if token is approved\nconst allowance=await tokenContract.methods.allowance(accounts[0],JACKPOT_ADDRESS).call();const hintCostWei=await jackpotContract.methods.hintCost().call();if(parseInt(allowance)<parseInt(hintCostWei)){setStatusMessage('Approving tokens for hint... Please confirm in MetaMask');await tokenContract.methods.approve(JACKPOT_ADDRESS,hintCostWei).send({from:accounts[0]});}setStatusMessage('Purchasing hint... Please confirm in MetaMask');// Request hint - this records the purchase on-chain\nawait jackpotContract.methods.requestHint().send({from:accounts[0]});// Get the latest hint index\nconst hintIndex=parseInt(await jackpotContract.methods.hintCount().call())-1;// Verify purchase was recorded\nconst hasAccess=await jackpotContract.methods.hasAccessToHint(accounts[0],hintIndex).call();if(hasAccess){// Fetch hint from API\nconst hint=await getHintContent(hintIndex,accounts[0]);setHintValue(hint);// Cache in localStorage for offline access\nif(hint&&!hint.startsWith(\"Error\")&&!hint.startsWith(\"Unable\")){localStorage.setItem(`hint_${accounts[0]}_${hintIndex}`,hint);}// Update purchased hints\nsetPurchasedHints(prev=>[...prev,hintIndex]);setStatusMessage('Hint purchased successfully!');}else{setStatusMessage('Error verifying hint purchase. Please try again.');}// Reload token balance\nconst tokenBalanceWei=await tokenContract.methods.balanceOf(accounts[0]).call();setTokenBalance(tokenBalanceWei);setIsLoading(false);}catch(error){console.error(\"Error getting hint:\",error);setStatusMessage('Error getting hint. Please try again.');setIsLoading(false);}};// eslint-disable-next-line react-hooks/exhaustive-deps\nconst calculateGuessChance=useCallback(async()=>{if(!jackpotContract||!web3||!accounts[0]||!currentGuess)return;try{const chance=await jackpotContract.methods.calculateGuessChance(currentGuess).call();setGuessChance(chance/100+'%');}catch(error){console.error(\"Error calculating guess chance:\",error);setGuessChance('0%');}},[jackpotContract,web3,accounts,currentGuess]);const makeGuess=async()=>{if(!jackpotContract||!web3||!accounts[0]||!currentGuess){setStatusMessage('Please connect your wallet and enter a guess');return;}try{setIsLoading(true);setStatusMessage('Submitting guess... Please confirm in your wallet');// Check if token is approved\nconst allowance=await tokenContract.methods.allowance(accounts[0],JACKPOT_ADDRESS).call();const guessCostWei=await jackpotContract.methods.guessCost().call();if(parseInt(allowance)<parseInt(guessCostWei)){// Approve tokens\nsetStatusMessage('Approving tokens for guess... Please confirm in your wallet');await tokenContract.methods.approve(JACKPOT_ADDRESS,guessCostWei).send({from:accounts[0]});}// Make guess in a single step\nsetStatusMessage('Checking your guess... Please confirm in your wallet');const result=await jackpotContract.methods.singleStepGuess(currentGuess).send({from:accounts[0]});// Check if user won from transaction events\nlet won=false;if(result.events&&result.events.GuessRevealed){won=result.events.GuessRevealed.returnValues.won;}if(won){setStatusMessage('🎉 Congratulations! Your guess was correct and you won the jackpot! 🎉');}else{setStatusMessage('Sorry, your guess was incorrect. Try again with another guess!');}// Reload contract data after guess\nawait loadContractData(web3,jackpotContract,tokenContract,bondingCurveContract,accounts[0]);setCurrentGuess('');setIsLoading(false);}catch(error){console.error(\"Error making guess:\",error);setStatusMessage('Error making guess. Please try again.');setIsLoading(false);}};// Updated renderHintHistory function\nconst renderHintHistory=()=>{if(purchasedHints.length===0)return null;return/*#__PURE__*/_jsxs(\"div\",{className:\"hint-history\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Your Purchased Hints\"}),/*#__PURE__*/_jsx(\"ul\",{children:purchasedHints.map(index=>{const hintKey=`hint_${accounts[0]}_${index}`;const hintContent=localStorage.getItem(hintKey)||\"Loading hint...\";return/*#__PURE__*/_jsxs(\"li\",{className:\"hint-item\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"hint-number\",children:[\"Hint #\",index+1,\":\"]}),\" \",hintContent]},index);})})]});};useEffect(()=>{const initWeb3=async()=>{if(window.ethereum){try{setStatusMessage('Connecting to blockchain...');// Request account access with timeout\nconst accounts=await Promise.race([window.ethereum.request({method:'eth_requestAccounts'}),new Promise((_,reject)=>setTimeout(()=>reject(new Error('Connection timeout')),10000))]);if(accounts.length===0){setStatusMessage('Please connect your wallet');return;}const web3Instance=new Web3(window.ethereum);// Initialize contracts with minimal information first\nconst jackpotInstance=new web3Instance.eth.Contract(JackpotGameABI.abi,JACKPOT_ADDRESS);const tokenInstance=new web3Instance.eth.Contract(Token100xABI.abi,TOKEN_ADDRESS);const bondingCurveInstance=new web3Instance.eth.Contract(BondingCurveABI.abi,BONDING_CURVE_ADDRESS);// Set initial state\nsetWeb3(web3Instance);setAccounts(accounts);setJackpotContract(jackpotInstance);setTokenContract(tokenInstance);setBondingCurveContract(bondingCurveInstance);// Load contract data\nawait loadContractData(web3Instance,jackpotInstance,tokenInstance,bondingCurveInstance,accounts[0]);}catch(error){console.error(\"Web3 initialization error:\",error);setStatusMessage(`Connection failed: ${error.message}`);}}else{setStatusMessage('Please install a Web3 wallet like MetaMask');}};initWeb3();},[JACKPOT_ADDRESS,TOKEN_ADDRESS,BONDING_CURVE_ADDRESS,loadContractData]);useEffect(()=>{if(currentGuess&&jackpotContract&&web3&&accounts[0]){calculateGuessChance();}},[currentGuess,jackpotContract,web3,accounts,calculateGuessChance]);return/*#__PURE__*/_jsxs(\"div\",{className:\"app-container\",children:[/*#__PURE__*/_jsxs(\"header\",{className:\"app-header\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"title\",children:\"100X Jackpot Game\"}),/*#__PURE__*/_jsxs(\"p\",{className:\"connected-wallet\",children:[\"Connected: \",accounts.length>0?formatAddress(accounts[0]):'Not connected']}),statusMessage&&/*#__PURE__*/_jsx(\"p\",{className:\"status-message\",children:statusMessage})]}),/*#__PURE__*/_jsxs(\"main\",{className:\"app-main\",children:[/*#__PURE__*/_jsxs(\"section\",{className:\"game-section\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"section-title\",children:\"Jackpot Game\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"jackpot-info\",children:[/*#__PURE__*/_jsxs(\"p\",{className:\"info-item\",children:[\"Current Jackpot: \",jackpotValue,\" S\"]}),/*#__PURE__*/_jsxs(\"p\",{className:\"info-item\",children:[\"Next Jackpot: \",nextJackpotValue,\" S\"]}),/*#__PURE__*/_jsxs(\"p\",{className:\"info-item\",children:[\"Guess Cost: \",guessCost,\" 100X\"]}),/*#__PURE__*/_jsxs(\"p\",{className:\"info-item\",children:[\"Hint Cost: \",hintCost,\" 100X\"]}),/*#__PURE__*/_jsxs(\"p\",{className:\"info-item\",children:[\"Unique Players: \",uniquePlayers]}),/*#__PURE__*/_jsxs(\"p\",{className:\"info-item\",children:[\"Total Winners: \",totalWinners]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"game-controls\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"guess-input\",placeholder:\"Enter your guess\",value:currentGuess,onChange:e=>setCurrentGuess(e.target.value)}),/*#__PURE__*/_jsxs(\"p\",{className:\"guess-chance\",children:[\"Guess Chance: \",guessChance]}),/*#__PURE__*/_jsx(\"button\",{className:\"action-button make-guess-button\",onClick:makeGuess,disabled:isLoading,children:\"Make Guess\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"hint-section\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"action-button hint-button\",onClick:getHint,disabled:isLoading,children:\"Buy Hint\"}),hintValue&&/*#__PURE__*/_jsxs(\"p\",{className:\"hint-value\",children:[\"Hint: \",hintValue]}),renderHintHistory()]})]}),/*#__PURE__*/_jsxs(\"section\",{className:\"token-section\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"section-title\",children:\"100X Token\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"token-info\",children:[/*#__PURE__*/_jsxs(\"p\",{className:\"info-item\",children:[\"Your Balance: \",formatTokenAmount(tokenBalance),\" 100X\"]}),/*#__PURE__*/_jsxs(\"p\",{className:\"info-item\",children:[\"Total Supply: \",formatTokenAmount(totalSupply),\" 100X\"]}),/*#__PURE__*/_jsxs(\"p\",{className:\"info-item\",children:[\"Current Price: \",tokenPrice,\" S\"]}),/*#__PURE__*/_jsxs(\"p\",{className:\"info-item\",children:[\"Liquidity Pool: \",liquidityValue,\" S\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"token-controls\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"mode-toggle\",children:[/*#__PURE__*/_jsx(\"button\",{className:`toggle-button ${buySellMode==='buy'?'active':''}`,onClick:()=>setBuySellMode('buy'),children:\"Buy\"}),/*#__PURE__*/_jsx(\"button\",{className:`toggle-button ${buySellMode==='sell'?'active':''}`,onClick:()=>setBuySellMode('sell'),children:\"Sell\"})]}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",className:\"token-amount-input\",min:\"0\",step:\"1\",placeholder:\"Amount of tokens\",value:numTokens,onChange:e=>setNumTokens(e.target.value)}),buySellMode==='buy'?/*#__PURE__*/_jsx(\"button\",{className:\"action-button buy-button\",onClick:buyTokens,disabled:isLoading,children:\"Buy Tokens\"}):/*#__PURE__*/_jsx(\"button\",{className:\"action-button sell-button\",onClick:sellTokens,disabled:isLoading,children:\"Sell Tokens\"})]})]})]}),/*#__PURE__*/_jsx(\"footer\",{className:\"app-footer\",children:/*#__PURE__*/_jsx(\"p\",{children:\"DeFAI Hackathon Project - Sonic Chain - 2024\"})})]});};export default App;","map":{"version":3,"names":["React","useState","useEffect","useCallback","Web3","JackpotGameABI","Token100xABI","BondingCurveABI","jsx","_jsx","jsxs","_jsxs","App","nextJackpotValue","setNextJackpotValue","guessCost","setGuessCost","web3","setWeb3","accounts","setAccounts","jackpotContract","setJackpotContract","tokenContract","setTokenContract","bondingCurveContract","setBondingCurveContract","currentGuess","setCurrentGuess","guessChance","setGuessChance","jackpotValue","setJackpotValue","hintValue","setHintValue","liquidityValue","setLiquidityValue","tokenPrice","setTokenPrice","numTokens","setNumTokens","totalSupply","setTotalSupply","buySellMode","setBuySellMode","hintCost","setHintCost","tokenBalance","setTokenBalance","uniquePlayers","setUniquePlayers","totalWinners","setTotalWinners","isLoading","setIsLoading","statusMessage","setStatusMessage","purchasedHints","setPurchasedHints","JACKPOT_ADDRESS","process","env","REACT_APP_JACKPOT_ADDRESS","TOKEN_ADDRESS","REACT_APP_TOKEN_ADDRESS","BONDING_CURVE_ADDRESS","REACT_APP_BONDING_CURVE_ADDRESS","formatAddress","address","substring","length","formatTokenAmount","amount","amountStr","toString","amountBN","utils","BN","tokenAmount","div","parsedAmount","parseFloat","billionsAmount","toLocaleString","undefined","maximumFractionDigits","millionsAmount","thousandsAmount","error","console","getHintContent","hintIndex","userAddress","response","fetch","ok","data","json","hintContent","loadPurchasedHints","hintTotal","parseInt","methods","hintCount","call","purchased","hintAccessPromises","Array","from","_","i","hasAccess","hasAccessToHint","hintAccess","Promise","all","filter","index","latestHintIndex","hint","loadContractData","jackpot","token","bondingCurve","account","tokenSupply","balanceOf","jackpotAmount","nextJackpotAmount","fromWei","window","BigInt","poolInfo","getPoolInfo","actualS","currentPriceWei","getCurrentPrice","err","warn","buyTokens","numTokensBaseUnits","Math","floor","costWei","calculateBuyPrice","log","buy","send","value","sellTokens","allowance","sellPriceWei","calculateSellPrice","toWei","approve","sell","getHint","hintCostWei","requestHint","startsWith","localStorage","setItem","prev","tokenBalanceWei","calculateGuessChance","chance","makeGuess","guessCostWei","result","singleStepGuess","won","events","GuessRevealed","returnValues","renderHintHistory","className","children","map","hintKey","getItem","initWeb3","ethereum","race","request","method","reject","setTimeout","Error","web3Instance","jackpotInstance","eth","Contract","abi","tokenInstance","bondingCurveInstance","message","type","placeholder","onChange","e","target","onClick","disabled","min","step"],"sources":["C:/Users/jdcju/Desktop/100xJackpotNew/frontend/src/app.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport Web3 from 'web3';\nimport JackpotGameABI from './abi/JackpotGame.json';\nimport Token100xABI from './abi/Token100x.json';\nimport BondingCurveABI from './abi/BondingCurve.json';\n\nconst App = () => {\n  // State variables\n  const [nextJackpotValue, setNextJackpotValue] = useState('0');\n  const [guessCost, setGuessCost] = useState('0');\n  const [web3, setWeb3] = useState(null);\n  const [accounts, setAccounts] = useState([]);\n  const [jackpotContract, setJackpotContract] = useState(null);\n  const [tokenContract, setTokenContract] = useState(null);\n  const [bondingCurveContract, setBondingCurveContract] = useState(null);\n  \n  const [currentGuess, setCurrentGuess] = useState('');\n  const [guessChance, setGuessChance] = useState('0');\n  const [jackpotValue, setJackpotValue] = useState('0');\n  const [hintValue, setHintValue] = useState('');\n  const [liquidityValue, setLiquidityValue] = useState('0');\n  const [tokenPrice, setTokenPrice] = useState('0');\n  const [numTokens, setNumTokens] = useState('1');\n  const [totalSupply, setTotalSupply] = useState('0');\n  const [buySellMode, setBuySellMode] = useState('buy');\n  const [hintCost, setHintCost] = useState('0');\n  const [tokenBalance, setTokenBalance] = useState('0');\n  const [uniquePlayers, setUniquePlayers] = useState(0);\n  const [totalWinners, setTotalWinners] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [statusMessage, setStatusMessage] = useState('');\n  const [purchasedHints, setPurchasedHints] = useState([]);\n  \n  const JACKPOT_ADDRESS = process.env.REACT_APP_JACKPOT_ADDRESS || '0x1bCb1B4474b636874E1C35B0CC32ADb408bb43e0';\n  const TOKEN_ADDRESS = process.env.REACT_APP_TOKEN_ADDRESS || '0x0755fb9917419a08c90a0Fd245F119202844ec3D';\n  const BONDING_CURVE_ADDRESS = process.env.REACT_APP_BONDING_CURVE_ADDRESS || '0x2ECA93adD34C533008b947B2Ed02e4974122D525';\n\n  // Format address for display\n  const formatAddress = (address) => {\n    if (!address || address === '0x0000000000000000000000000000000000000000') return 'None';\n    return `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;\n  };\n\n  // Format large numbers properly\n  const formatTokenAmount = (amount) => {\n    if (!amount || amount === '0') return '0';\n    \n    try {\n      // Convert from base units to tokens (6 decimals)\n      const amountStr = amount.toString(); // Ensure we have a string\n      const amountBN = new Web3.utils.BN(amountStr);\n      const tokenAmount = amountBN.div(new Web3.utils.BN(10 ** 6));\n      const parsedAmount = parseFloat(tokenAmount.toString());\n\n      // Format for very large numbers\n      if (parsedAmount >= 1_000_000_000) {\n        const billionsAmount = parsedAmount / 1_000_000_000;\n        return `${billionsAmount.toLocaleString(undefined, {maximumFractionDigits: 0})}B`;\n      } else if (parsedAmount >= 1_000_000) {\n        const millionsAmount = parsedAmount / 1_000_000;\n        return `${millionsAmount.toLocaleString(undefined, {maximumFractionDigits: 0})}M`;\n      } else if (parsedAmount >= 1_000) {\n        const thousandsAmount = parsedAmount / 1_000;\n        return `${thousandsAmount.toLocaleString(undefined, {maximumFractionDigits: 0})}k`;\n      } else {\n        return parsedAmount.toLocaleString(undefined, {maximumFractionDigits: 6});\n      }\n    } catch (error) {\n      console.error('Error formatting token amount:', error, 'Input:', amount);\n      return '0';\n    }\n  };\n// Add this function to fetch hint content from the API\nconst getHintContent = async (hintIndex, userAddress) => {\n  try {\n    const response = await fetch(`/.netlify/functions/getHint?hintIndex=${hintIndex}&userAddress=${userAddress}`);\n    \n    if (response.ok) {\n      const data = await response.json();\n      return data.hintContent;\n    } else {\n      const error = await response.json();\n      console.error(\"Error fetching hint:\", error);\n      return \"Error retrieving hint\";\n    }\n  } catch (error) {\n    console.error(\"Error connecting to hint API:\", error);\n    return \"Unable to connect to hint server\";\n  }\n};\n// Updated loadPurchasedHints function\nconst loadPurchasedHints = useCallback(async () => {\n  if (!jackpotContract || !accounts[0]) return;\n  \n  try {\n    const hintTotal = parseInt(await jackpotContract.methods.hintCount().call());\n    let purchased = [];\n    \n    // Concurrent hint access checks\n    const hintAccessPromises = Array.from({length: hintTotal}, async (_, i) => {\n      const hasAccess = await jackpotContract.methods.hasAccessToHint(accounts[0], i).call();\n      return hasAccess ? i : null;\n    });\n    \n    const hintAccess = await Promise.all(hintAccessPromises);\n    \n    purchased = hintAccess.filter(index => index !== null);\n    setPurchasedHints(purchased);\n    \n    // Set most recent hint if available\n    if (purchased.length > 0) {\n      const latestHintIndex = purchased[purchased.length - 1];\n      const hint = await getHintContent(latestHintIndex, accounts[0]);\n      setHintValue(hint);\n    }\n  } catch (error) {\n    console.error(\"Error loading purchased hints:\", error);\n  }\n}, [jackpotContract, accounts, getHintContent]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const loadContractData = useCallback(async (web3, jackpot, token, bondingCurve, account) => {\n    try {\n      setIsLoading(true);\n      setStatusMessage('Loading contract data...');\n  \n      // Use Promise.all for concurrent calls\n      const [\n        tokenBalance,\n        tokenSupply,\n        jackpotValue,\n        nextJackpotValue,\n        guessCost,\n        hintCost,\n        totalWinners,\n        uniquePlayers\n      ] = await Promise.all([\n        token.methods.balanceOf(account).call(),\n        token.methods.totalSupply().call(),\n        jackpot.methods.jackpotAmount().call(),\n        jackpot.methods.nextJackpotAmount().call(),\n        jackpot.methods.guessCost().call(),\n        jackpot.methods.hintCost().call(),\n        jackpot.methods.totalWinners().call(),\n        jackpot.methods.uniquePlayers().call()\n      ]);\n  \n      // Simplified state updates with less formatting\n      setTokenBalance(tokenBalance);\n      setTotalSupply(tokenSupply);\n      \n      // Simplified jackpot value handling\n      setJackpotValue(web3.utils.fromWei(jackpotValue, 'ether'));\n      setNextJackpotValue(web3.utils.fromWei(nextJackpotValue, 'ether'));\n      \n      // Direct conversion of token amounts\n      setGuessCost((window.BigInt(guessCost) / window.BigInt(10 ** 6)).toString());\n      setHintCost((window.BigInt(hintCost) / window.BigInt(10 ** 6)).toString());\n      \n      setTotalWinners(totalWinners);\n      setUniquePlayers(uniquePlayers);\n  \n      // Optional: Simplified bonding curve data (if needed)\n      try {\n        const poolInfo = await bondingCurve.methods.getPoolInfo().call();\n        setLiquidityValue(web3.utils.fromWei(poolInfo.actualS, 'ether'));\n        const currentPriceWei = await bondingCurve.methods.getCurrentPrice().call();\n        setTokenPrice(web3.utils.fromWei(currentPriceWei, 'ether'));\n      } catch (err) {\n        console.warn(\"Bonding curve data fetch failed:\", err);\n      }\n  \n      setStatusMessage('');\n    } catch (error) {\n      console.error(\"Contract data loading error:\", error);\n      setStatusMessage('Error loading data. Check connection.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const buyTokens = async () => {\n    if (!bondingCurveContract || !web3 || !accounts[0] || !numTokens) {\n      setStatusMessage('Please connect wallet and enter token amount');\n      return;\n    }\n    \n    // Convert input to base units (directly use the input)\n    const numTokensBaseUnits = Math.floor(parseFloat(numTokens));\n    \n    try {\n      setIsLoading(true);\n      setStatusMessage('Calculating token price...');\n      \n      // Calculate buy price from the contract\n      const costWei = await bondingCurveContract.methods.calculateBuyPrice(numTokensBaseUnits).call();\n      \n      // Log for debugging\n      console.log('Num Tokens (Base Units):', numTokensBaseUnits);\n      console.log('Cost (Wei):', costWei);\n      console.log('Cost (Ether):', web3.utils.fromWei(costWei, 'ether'));\n      \n      setStatusMessage(`Buying tokens... Please confirm in MetaMask (${web3.utils.fromWei(costWei, 'ether')} S)`);\n      \n      await bondingCurveContract.methods.buy(numTokensBaseUnits).send({\n        from: accounts[0],\n        value: costWei\n      });\n      \n      setStatusMessage('Tokens purchased successfully!');\n      \n      // Reload contract data\n      await loadContractData(web3, jackpotContract, tokenContract, bondingCurveContract, accounts[0]);\n      setIsLoading(false);\n    } catch (error) {\n      console.error(\"Error buying tokens:\", error);\n      setStatusMessage('Error buying tokens. Please try again.');\n      setIsLoading(false);\n    }\n  };\n\n  const sellTokens = async () => {\n    if (!bondingCurveContract || !web3 || !accounts[0] || !numTokens) {\n      setStatusMessage('Please connect wallet and enter token amount');\n      return;\n    }\n    \n    // Convert input to base units (directly use the input)\n    const numTokensBaseUnits = Math.floor(parseFloat(numTokens));\n    \n    try {\n      setIsLoading(true);\n      setStatusMessage('Preparing to sell tokens...');\n      \n      // Check if token is approved\n      const allowance = await tokenContract.methods.allowance(accounts[0], BONDING_CURVE_ADDRESS).call();\n  \n      // Calculate sell price\n      const sellPriceWei = await bondingCurveContract.methods.calculateSellPrice(numTokensBaseUnits).call();\n      \n      console.log('Num Tokens (Base Units):', numTokensBaseUnits);\n      console.log('Sell Price (Wei):', sellPriceWei);\n      console.log('Sell Price (Ether):', web3.utils.fromWei(sellPriceWei, 'ether'));\n      \n      // Check if token is approved for the correct amount\n      if (parseInt(allowance) < parseInt(web3.utils.toWei(numTokens, 'ether'))) {\n        // Approve tokens\n        setStatusMessage('Approving tokens for sale... Please confirm in MetaMask');\n        await tokenContract.methods.approve(BONDING_CURVE_ADDRESS, web3.utils.toWei(numTokens, 'ether')).send({\n          from: accounts[0]\n        });\n      }\n      \n      setStatusMessage(`Selling tokens... Please confirm in MetaMask (${web3.utils.fromWei(sellPriceWei, 'ether')} S)`);\n      \n      await bondingCurveContract.methods.sell(numTokensBaseUnits).send({\n        from: accounts[0]\n      });\n      \n      setStatusMessage('Tokens sold successfully!');\n      \n      // Reload contract data\n      await loadContractData(web3, jackpotContract, tokenContract, bondingCurveContract, accounts[0]);\n      setIsLoading(false);\n    } catch (error) {\n      console.error(\"Error selling tokens:\", error);\n      setStatusMessage('Error selling tokens. Please try again.');\n      setIsLoading(false);\n    }\n  };\n\n  const getHint = async () => {\n    if (!jackpotContract || !web3 || !accounts[0]) {\n      setStatusMessage('Please connect wallet first');\n      return;\n    }\n    \n    try {\n      setIsLoading(true);\n      setStatusMessage('Preparing to get hint...');\n      \n      // Check if token is approved\n      const allowance = await tokenContract.methods.allowance(accounts[0], JACKPOT_ADDRESS).call();\n      const hintCostWei = await jackpotContract.methods.hintCost().call();\n      \n      if (parseInt(allowance) < parseInt(hintCostWei)) {\n        setStatusMessage('Approving tokens for hint... Please confirm in MetaMask');\n        await tokenContract.methods.approve(JACKPOT_ADDRESS, hintCostWei).send({\n          from: accounts[0]\n        });\n      }\n      \n      setStatusMessage('Purchasing hint... Please confirm in MetaMask');\n      \n      // Request hint - this records the purchase on-chain\n      await jackpotContract.methods.requestHint().send({\n        from: accounts[0]\n      });\n      \n      // Get the latest hint index\n      const hintIndex = parseInt(await jackpotContract.methods.hintCount().call()) - 1;\n      \n      // Verify purchase was recorded\n      const hasAccess = await jackpotContract.methods.hasAccessToHint(accounts[0], hintIndex).call();\n      \n      if (hasAccess) {\n        // Fetch hint from API\n        const hint = await getHintContent(hintIndex, accounts[0]);\n        setHintValue(hint);\n        \n        // Cache in localStorage for offline access\n        if (hint && !hint.startsWith(\"Error\") && !hint.startsWith(\"Unable\")) {\n          localStorage.setItem(`hint_${accounts[0]}_${hintIndex}`, hint);\n        }\n        \n        // Update purchased hints\n        setPurchasedHints(prev => [...prev, hintIndex]);\n        setStatusMessage('Hint purchased successfully!');\n      } else {\n        setStatusMessage('Error verifying hint purchase. Please try again.');\n      }\n      \n      // Reload token balance\n      const tokenBalanceWei = await tokenContract.methods.balanceOf(accounts[0]).call();\n      setTokenBalance(tokenBalanceWei);\n      setIsLoading(false);\n    } catch (error) {\n      console.error(\"Error getting hint:\", error);\n      setStatusMessage('Error getting hint. Please try again.');\n      setIsLoading(false);\n    }\n  };\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const calculateGuessChance = useCallback(async () => {\n    if (!jackpotContract || !web3 || !accounts[0] || !currentGuess) return;\n    \n    try {\n      const chance = await jackpotContract.methods.calculateGuessChance(currentGuess).call();\n      setGuessChance(chance / 100 + '%');\n    } catch (error) {\n      console.error(\"Error calculating guess chance:\", error);\n      setGuessChance('0%');\n    }\n  }, [jackpotContract, web3, accounts, currentGuess]);\n\n  const makeGuess = async () => {\n    if (!jackpotContract || !web3 || !accounts[0] || !currentGuess) {\n      setStatusMessage('Please connect your wallet and enter a guess');\n      return;\n    }\n    \n    try {\n      setIsLoading(true);\n      setStatusMessage('Submitting guess... Please confirm in your wallet');\n      \n      // Check if token is approved\n      const allowance = await tokenContract.methods.allowance(accounts[0], JACKPOT_ADDRESS).call();\n      const guessCostWei = await jackpotContract.methods.guessCost().call();\n      \n      if (parseInt(allowance) < parseInt(guessCostWei)) {\n        // Approve tokens\n        setStatusMessage('Approving tokens for guess... Please confirm in your wallet');\n        await tokenContract.methods.approve(JACKPOT_ADDRESS, guessCostWei).send({\n          from: accounts[0]\n        });\n      }\n      \n      // Make guess in a single step\n      setStatusMessage('Checking your guess... Please confirm in your wallet');\n      const result = await jackpotContract.methods.singleStepGuess(currentGuess).send({\n        from: accounts[0]\n      });\n      \n      // Check if user won from transaction events\n      let won = false;\n      if (result.events && result.events.GuessRevealed) {\n        won = result.events.GuessRevealed.returnValues.won;\n      }\n      \n      if (won) {\n        setStatusMessage('🎉 Congratulations! Your guess was correct and you won the jackpot! 🎉');\n      } else {\n        setStatusMessage('Sorry, your guess was incorrect. Try again with another guess!');\n      }\n      \n      // Reload contract data after guess\n      await loadContractData(web3, jackpotContract, tokenContract, bondingCurveContract, accounts[0]);\n      setCurrentGuess('');\n      setIsLoading(false);\n    } catch (error) {\n      console.error(\"Error making guess:\", error);\n      setStatusMessage('Error making guess. Please try again.');\n      setIsLoading(false);\n    }\n  };\n\n// Updated renderHintHistory function\nconst renderHintHistory = () => {\n  if (purchasedHints.length === 0) return null;\n  \n  return (\n    <div className=\"hint-history\">\n      <h3>Your Purchased Hints</h3>\n      <ul>\n        {purchasedHints.map(index => {\n          const hintKey = `hint_${accounts[0]}_${index}`;\n          const hintContent = localStorage.getItem(hintKey) || \"Loading hint...\";\n          \n          return (\n            <li key={index} className=\"hint-item\">\n              <span className=\"hint-number\">Hint #{index + 1}:</span> {hintContent}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nuseEffect(() => {\n  const initWeb3 = async () => {\n    if (window.ethereum) {\n      try {\n        setStatusMessage('Connecting to blockchain...');\n        \n        // Request account access with timeout\n        const accounts = await Promise.race([\n          window.ethereum.request({ method: 'eth_requestAccounts' }),\n          new Promise((_, reject) => \n            setTimeout(() => reject(new Error('Connection timeout')), 10000)\n          )\n        ]);\n\n        if (accounts.length === 0) {\n          setStatusMessage('Please connect your wallet');\n          return;\n        }\n\n        const web3Instance = new Web3(window.ethereum);\n        \n        // Initialize contracts with minimal information first\n        const jackpotInstance = new web3Instance.eth.Contract(JackpotGameABI.abi, JACKPOT_ADDRESS);\n        const tokenInstance = new web3Instance.eth.Contract(Token100xABI.abi, TOKEN_ADDRESS);\n        const bondingCurveInstance = new web3Instance.eth.Contract(BondingCurveABI.abi, BONDING_CURVE_ADDRESS);\n        \n        // Set initial state\n        setWeb3(web3Instance);\n        setAccounts(accounts);\n        setJackpotContract(jackpotInstance);\n        setTokenContract(tokenInstance);\n        setBondingCurveContract(bondingCurveInstance);\n\n        // Load contract data\n        await loadContractData(web3Instance, jackpotInstance, tokenInstance, bondingCurveInstance, accounts[0]);\n      } catch (error) {\n        console.error(\"Web3 initialization error:\", error);\n        setStatusMessage(`Connection failed: ${error.message}`);\n      }\n    } else {\n      setStatusMessage('Please install a Web3 wallet like MetaMask');\n    }\n  };\n  \n  initWeb3();\n}, [JACKPOT_ADDRESS, TOKEN_ADDRESS, BONDING_CURVE_ADDRESS, loadContractData]);\n\n  useEffect(() => {\n    if (currentGuess && jackpotContract && web3 && accounts[0]) {\n      calculateGuessChance();\n    }\n  }, [currentGuess, jackpotContract, web3, accounts, calculateGuessChance]);\n\n  return (\n    <div className=\"app-container\">\n      <header className=\"app-header\">\n        <h1 className=\"title\">100X Jackpot Game</h1>\n        <p className=\"connected-wallet\">Connected: {accounts.length > 0 ? formatAddress(accounts[0]) : 'Not connected'}</p>\n        {statusMessage && <p className=\"status-message\">{statusMessage}</p>}\n      </header>\n      \n      <main className=\"app-main\">\n        <section className=\"game-section\">\n          <h2 className=\"section-title\">Jackpot Game</h2>\n          <div className=\"jackpot-info\">\n            <p className=\"info-item\">Current Jackpot: {jackpotValue} S</p>\n            <p className=\"info-item\">Next Jackpot: {nextJackpotValue} S</p>\n            <p className=\"info-item\">Guess Cost: {guessCost} 100X</p>\n            <p className=\"info-item\">Hint Cost: {hintCost} 100X</p>\n            <p className=\"info-item\">Unique Players: {uniquePlayers}</p>\n            <p className=\"info-item\">Total Winners: {totalWinners}</p>\n          </div>\n          \n          <div className=\"game-controls\">\n            <input \n              type=\"text\" \n              className=\"guess-input\"\n              placeholder=\"Enter your guess\" \n              value={currentGuess} \n              onChange={(e) => setCurrentGuess(e.target.value)}\n            />\n            <p className=\"guess-chance\">Guess Chance: {guessChance}</p>\n            <button \n              className=\"action-button make-guess-button\" \n              onClick={makeGuess}\n              disabled={isLoading}\n            >\n              Make Guess\n            </button>\n          </div>\n          \n          <div className=\"hint-section\">\n            <button \n              className=\"action-button hint-button\" \n              onClick={getHint}\n              disabled={isLoading}\n            >\n              Buy Hint\n            </button>\n            {hintValue && <p className=\"hint-value\">Hint: {hintValue}</p>}\n            {renderHintHistory()}\n          </div>\n        </section>\n        \n        <section className=\"token-section\">\n          <h2 className=\"section-title\">100X Token</h2>\n          <div className=\"token-info\">\n            <p className=\"info-item\">Your Balance: {formatTokenAmount(tokenBalance)} 100X</p>\n            <p className=\"info-item\">Total Supply: {formatTokenAmount(totalSupply)} 100X</p>\n            <p className=\"info-item\">Current Price: {tokenPrice} S</p>\n            <p className=\"info-item\">Liquidity Pool: {liquidityValue} S</p>\n          </div>\n          \n          <div className=\"token-controls\">\n            <div className=\"mode-toggle\">\n              <button \n                className={`toggle-button ${buySellMode === 'buy' ? 'active' : ''}`}\n                onClick={() => setBuySellMode('buy')}\n              >\n                Buy\n              </button>\n              <button \n                className={`toggle-button ${buySellMode === 'sell' ? 'active' : ''}`}\n                onClick={() => setBuySellMode('sell')}\n              >\n                Sell\n              </button>\n            </div>\n            \n            <input \n              type=\"number\" \n              className=\"token-amount-input\"\n              min=\"0\" \n              step=\"1\" \n              placeholder=\"Amount of tokens\" \n              value={numTokens} \n              onChange={(e) => setNumTokens(e.target.value)}\n            />\n            \n            {buySellMode === 'buy' ? (\n              <button \n                className=\"action-button buy-button\" \n                onClick={buyTokens}\n                disabled={isLoading}\n              >\n                Buy Tokens\n              </button>\n            ) : (\n              <button \n                className=\"action-button sell-button\" \n                onClick={sellTokens}\n                disabled={isLoading}\n              >\n                Sell Tokens\n              </button>\n            )}\n          </div>\n        </section>\n        \n       \n      </main>\n      \n      <footer className=\"app-footer\">\n        <p>DeFAI Hackathon Project - Sonic Chain - 2024</p>\n      </footer>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}